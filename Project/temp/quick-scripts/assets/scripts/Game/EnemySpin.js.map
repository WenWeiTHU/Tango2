{"version":3,"sources":["EnemySpin.js"],"names":["cc","Class","extends","require","properties","Player","type","Node","default","override","centerX","centerY","centerSpeed","radius","circulateUpdate","onLoad","director","getCollisionManager","enabled","circulate","angle","circulateDir","node","x","Math","sin","PI","y","cos","start","onCollisionEnter","other","self","group","Explode","play","blast","instantiate","BlastPrefab","parent","addChild","setPosition","animComponent","getComponent","Animation","destroy","updatePos","dt","dir","v2","distance","mag","update","rotate"],"mappings":";;;;;;AAAA;;;;AAIAA,GAAGC,KAAH,CAAS;AACPC,WAASC,QAAQ,YAAR,CADF;;AAGPC,cAAY;AACVC,YAAQ;AACNC,YAAMN,GAAGO,IADH;AAENC,eAAS,IAFH;AAGNC,gBAAU;AAHJ,KADE;AAMVC,aAAS,CANC,EAME;AACZC,aAAS,CAPC;AAQVC,iBAAa,EARH,EAQO;AACjBC,YAAQ,GATE,EASG;AACbC,qBAAiB,CAVP,CAUS;AAVT,GAHL;;AAgBP;;AAEA;;;;AAIAC,QAtBO,oBAsBG;AACRf,OAAGgB,QAAH,CAAYC,mBAAZ,GAAkCC,OAAlC,GAA4C,IAA5C;AACD,GAxBM;;;AA0BP;;;;AAIAC,aAAW,qBAAY;AACrB,SAAKC,KAAL,IAAc,KAAKC,YAAL,GAAoB,KAAKP,eAAvC;;AAEA,SAAKM,KAAL,GAAa,KAAKA,KAAL,GAAa,GAAb,GAAmB,KAAKA,KAAL,GAAa,GAAhC,GAAsC,KAAKA,KAAxD;;AAEA,SAAKE,IAAL,CAAUC,CAAV,GAAc,KAAKb,OAAL,GAAe,KAAKG,MAAL,GAAcW,KAAKC,GAAL,CAAS,KAAKL,KAAL,GAAaI,KAAKE,EAAlB,GAAuB,GAAhC,CAA3C;AACA,SAAKJ,IAAL,CAAUK,CAAV,GAAc,KAAKhB,OAAL,GAAe,KAAKE,MAAL,GAAcW,KAAKI,GAAL,CAAS,KAAKR,KAAL,GAAaI,KAAKE,EAAlB,GAAuB,GAAhC,CAA3C;AACD,GArCM;;AAuCPG,OAvCO,mBAuCE;AACP,SAAKT,KAAL,GAAa,CAAb;AACA,SAAKC,YAAL,GAAoB,CAApB;AACD,GA1CM;;;AA4CP;;;;AAIAS,kBAhDO,4BAgDWC,KAhDX,EAgDkBC,IAhDlB,EAgDwB;AAC7B,QAAID,MAAMT,IAAN,CAAWW,KAAX,KAAqB,KAAzB,EAAgC;AAC9B;AACA,WAAKZ,YAAL,IAAqB,CAAC,CAAtB;AACD,KAHD,MAGO;AACL;AACA,WAAKa,OAAL,CAAaC,IAAb;AACA,UAAIC,QAAQpC,GAAGqC,WAAH,CAAe,KAAKC,WAApB,CAAZ;;AAEA,WAAKhB,IAAL,CAAUiB,MAAV,CAAiBC,QAAjB,CAA0BJ,KAA1B;AACAA,YAAMK,WAAN,CAAkB,KAAKnB,IAAL,CAAUC,CAA5B,EAA+B,KAAKD,IAAL,CAAUK,CAAzC;;AAEA,UAAIe,gBAAgBN,MAAMO,YAAN,CAAmB3C,GAAG4C,SAAtB,CAApB;AACAF,oBAAcP,IAAd,CAAmB,QAAnB;;AAEA,WAAKb,IAAL,CAAUuB,OAAV;AACD;AACF,GAjEM;;;AAmEP;;;;AAIAC,WAvEO,qBAuEIC,EAvEJ,EAuEQ;AACb,SAAKC,GAAL,GAAWhD,GAAGiD,EAAH,CAAM,KAAK5C,MAAL,CAAYkB,CAAZ,GAAgB,KAAKb,OAA3B,EAAoC,KAAKL,MAAL,CAAYsB,CAAZ,GAAgB,KAAKhB,OAAzD,CAAX;AACA,SAAKuC,QAAL,GAAgB,KAAKF,GAAL,CAASG,GAAT,EAAhB;;AAEA,SAAKzC,OAAL,IAAgB,KAAKsC,GAAL,CAASzB,CAAT,GAAa,KAAK2B,QAAlB,GAA6B,KAAKtC,WAAlC,GAAgDmC,EAAhE;AACA,SAAKpC,OAAL,IAAgB,KAAKqC,GAAL,CAASrB,CAAT,GAAa,KAAKuB,QAAlB,GAA6B,KAAKtC,WAAlC,GAAgDmC,EAAhE;AACD,GA7EM;;;AA+EP;AACAK,QAhFO,kBAgFCL,EAhFD,EAgFK;AACV,SAAKM,MAAL;AACA,SAAKP,SAAL,CAAeC,EAAf;AACA,SAAK5B,SAAL;AACD;AApFM,CAAT","file":"EnemySpin.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\Game","sourcesContent":["/*\n * 旋转追踪敌人脚本\n */\n\ncc.Class({\n  extends: require('EnemyTrack'),\n\n  properties: {\n    Player: {\n      type: cc.Node,\n      default: null,\n      override: true\n    },\n    centerX: 0, // 旋转中心\n    centerY: 0,\n    centerSpeed: 50, // 旋转中心移动速度\n    radius: 100, // 旋转半径\n    circulateUpdate: 2 // 旋转更新速度\n  },\n\n  // LIFE-CYCLE CALLBACKS:\n\n  /*\n     * 初始化函数\n     * 功能：初始化脚本所需的设定\n     */\n  onLoad () {\n    cc.director.getCollisionManager().enabled = true\n  },\n\n  /*\n     * 自转函数\n     * 功能：更新对象自转角度\n     */\n  circulate: function () {\n    this.angle += this.circulateDir * this.circulateUpdate\n\n    this.angle = this.angle > 360 ? this.angle - 360 : this.angle\n\n    this.node.x = this.centerX + this.radius * Math.sin(this.angle * Math.PI / 180)\n    this.node.y = this.centerY + this.radius * Math.cos(this.angle * Math.PI / 180)\n  },\n\n  start () {\n    this.angle = 0\n    this.circulateDir = 1\n  },\n\n  /*\n     * 碰撞检测函数\n     * 功能：当敌人发生碰撞时，调用此函数对对象进行处理\n     */\n  onCollisionEnter (other, self) {\n    if (other.node.group === 'Map') {\n      // 如果碰到了地图边界，则直接反弹\n      this.circulateDir *= -1\n    } else {\n      // 如果碰到了其他对象，则发生爆炸并销毁\n      this.Explode.play()\n      var blast = cc.instantiate(this.BlastPrefab)\n\n      this.node.parent.addChild(blast)\n      blast.setPosition(this.node.x, this.node.y)\n\n      var animComponent = blast.getComponent(cc.Animation)\n      animComponent.play('blast3')\n\n      this.node.destroy()\n    }\n  },\n\n  /*\n     * 更新位置函数\n     * 功能：根据分速度来更新对象的下一个位置\n     */\n  updatePos (dt) {\n    this.dir = cc.v2(this.Player.x - this.centerX, this.Player.y - this.centerY)\n    this.distance = this.dir.mag()\n\n    this.centerX += this.dir.x / this.distance * this.centerSpeed * dt\n    this.centerY += this.dir.y / this.distance * this.centerSpeed * dt\n  },\n\n  // 系统调用的更新函数\n  update (dt) {\n    this.rotate()\n    this.updatePos(dt)\n    this.circulate()\n  }\n})\n"]}