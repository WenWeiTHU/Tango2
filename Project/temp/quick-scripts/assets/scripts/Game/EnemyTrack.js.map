{"version":3,"sources":["EnemyTrack.js"],"names":["cc","Class","extends","require","properties","Player","type","Node","default","maxSpeed","iniAccel","start","director","getCollisionManager","enabled","speedX","speedY","track","dt","dir","v2","x","node","y","distance","mag","Math","sqrt","pow","update","rotate"],"mappings":";;;;;;AAAA;;;;AAIAA,GAAGC,KAAH,CAAS;AACPC,WAASC,QAAQ,OAAR,CADF;;AAGPC,cAAY;AACVC,YAAQ;AACNC,YAAMN,GAAGO,IADH;AAENC,eAAS;AAFH,KADE;AAKVC,cAAU,GALA,EAKK;AACfC,cAAU,IANA,CAMK;AANL,GAHL;;AAYP;;AAEA;;AAEA;;;;AAIAC,OApBO,mBAoBE;AACP;AACAX,OAAGY,QAAH,CAAYC,mBAAZ,GAAkCC,OAAlC,GAA4C,IAA5C;;AAEA;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,MAAL,GAAc,CAAd;AACD,GA3BM;;;AA6BP;;;;AAIAC,OAjCO,iBAiCAC,EAjCA,EAiCI;AACT,SAAKC,GAAL,GAAWnB,GAAGoB,EAAH,CAAM,KAAKf,MAAL,CAAYgB,CAAZ,GAAgB,KAAKC,IAAL,CAAUD,CAAhC,EAAmC,KAAKhB,MAAL,CAAYkB,CAAZ,GAAgB,KAAKD,IAAL,CAAUC,CAA7D,CAAX;;AAEA,SAAKC,QAAL,GAAgB,KAAKL,GAAL,CAASM,GAAT,EAAhB;;AAEA,QAAIC,KAAKC,IAAL,CAAUD,KAAKE,GAAL,CAAS,KAAKb,MAAd,EAAsB,CAAtB,IAA2BW,KAAKE,GAAL,CAAS,KAAKZ,MAAd,EAAsB,CAAtB,CAArC,IAAiE,KAAKP,QAA1E,EAAoF;AAClF,WAAKM,MAAL,IAAe,KAAKL,QAAL,GAAgBQ,EAA/B;AACA,WAAKF,MAAL,IAAe,KAAKN,QAAL,GAAgBQ,EAA/B;AACD;;AAED,SAAKI,IAAL,CAAUD,CAAV,IAAe,KAAKN,MAAL,GAAc,KAAKI,GAAL,CAASE,CAAvB,GAA2B,KAAKG,QAA/C;AACA,SAAKF,IAAL,CAAUC,CAAV,IAAe,KAAKP,MAAL,GAAc,KAAKG,GAAL,CAASI,CAAvB,GAA2B,KAAKC,QAA/C;AACD,GA7CM;AA+CPK,QA/CO,kBA+CCX,EA/CD,EA+CK;AACV,SAAKY,MAAL;AACA,SAAKb,KAAL,CAAWC,EAAX;AACD;AAlDM,CAAT","file":"EnemyTrack.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\Game","sourcesContent":["/*\n * 追踪敌人脚本\n */\n\ncc.Class({\n  extends: require('Enemy'),\n\n  properties: {\n    Player: {\n      type: cc.Node,\n      default: null\n    },\n    maxSpeed: 400, // 最大速度\n    iniAccel: 0.01 // 追踪初始加速度\n  },\n\n  // LIFE-CYCLE CALLBACKS:\n\n  // onLoad () {},\n\n  /*\n     * 初始化函数\n     * 功能：初始化脚本所需的设定\n     */\n  start () {\n    // 开启碰撞检测\n    cc.director.getCollisionManager().enabled = true\n\n    // 设置初速度为0\n    this.speedX = 0\n    this.speedY = 0\n  },\n\n  /*\n     * 追踪位置函数\n     * 功能：计算出对象与主角的方向，然后更新对象的速度和位置\n     */\n  track (dt) {\n    this.dir = cc.v2(this.Player.x - this.node.x, this.Player.y - this.node.y)\n\n    this.distance = this.dir.mag()\n\n    if (Math.sqrt(Math.pow(this.speedX, 2) + Math.pow(this.speedY, 2)) < this.maxSpeed) {\n      this.speedX += this.iniAccel * dt\n      this.speedY += this.iniAccel * dt\n    }\n\n    this.node.x += this.speedX * this.dir.x / this.distance\n    this.node.y += this.speedY * this.dir.y / this.distance\n  },\n\n  update (dt) {\n    this.rotate()\n    this.track(dt)\n  }\n})\n"]}